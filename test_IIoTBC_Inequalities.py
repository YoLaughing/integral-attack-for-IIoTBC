# This is a sample Python script.

# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.

eq_present = [[1, 4, 1, 1, -2, -2, -2, -2, 1],
    [0, 0, 3, 0, -1, -1, -1, -1, 1],
    [-2, 0, -1, -1, 4, 2, 3, 3, 0],
    [3, 0, 0, 0, -1, -1, -1, -1, 1],
    [-6, -4, -3, -3, 2, -1, 2, 2, 11],
    [0, 0, 0, 3, -1, -1, -1, -1, 1],
    [-2, -2, -4, -4, 1, 1, 2, -1, 9],
    [-1, -1, -2, -2, 5, 5, 5, 4, 0],
    [-1, 0, 0, -1, 0, -1, 1, 0, 2],
    [0, 1, 0, 0, -1, 0, -1, 0, 1]]

eq = [[1, 4, 1, 1, -2, -2, -2, -2, 1],
    [0, 0, 3, 0, -1, -1, -1, -1, 1],
    [-2, 0, -1, -1, 4, 2, 3, 3, 0],
    [3, 0, 0, 0, -1, -1, -1, -1, 1],
    [-6, -4, -3, -3, 2, -1, 2, 2, 11],
    [0, 0, 0, 3, -1, -1, -1, -1, 1],
    [-2, -2, -4, -4, 1, 1, 2, -1, 9],
    [-1, -1, -2, -2, 5, 5, 5, 4, 0],
    [-1, 0, 0, -1, 0, -1, 1, 0, 2],
    [0, 1, 0, 0, -1, 0, -1, 0, 1]]


Points1 = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [1, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1, 1, 0, 1, 1, 0], [1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 1, 0, 0, 0, 1, 0, 0], [1, 1, 0, 0, 1, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 1, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1]]
Points = [[0, 0, 0, 0, 0, 0, 0, 1],
[0, 0, 0, 0, 0, 0, 1, 0],
[0, 0, 0, 0, 0, 0, 1, 1],
[0, 0, 0, 0, 0, 1, 0, 0],
[0, 0, 0, 0, 0, 1, 0, 1],
[0, 0, 0, 0, 0, 1, 1, 0],
[0, 0, 0, 0, 0, 1, 1, 1],
[0, 0, 0, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 1, 0, 0, 1],
[0, 0, 0, 0, 1, 0, 1, 0],
[0, 0, 0, 0, 1, 0, 1, 1],
[0, 0, 0, 0, 1, 1, 0, 0],
[0, 0, 0, 0, 1, 1, 0, 1],
[0, 0, 0, 0, 1, 1, 1, 0],
[0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 1, 0, 0, 1, 1],
[0, 0, 0, 1, 0, 1, 0, 1],
[0, 0, 0, 1, 0, 1, 1, 0],
[0, 0, 0, 1, 0, 1, 1, 1],
[0, 0, 0, 1, 1, 0, 0, 1],
[0, 0, 0, 1, 1, 0, 1, 0],
[0, 0, 0, 1, 1, 0, 1, 1],
[0, 0, 0, 1, 1, 1, 0, 0],
[0, 0, 0, 1, 1, 1, 0, 1],
[0, 0, 0, 1, 1, 1, 1, 0],
[0, 0, 0, 1, 1, 1, 1, 1],
[0, 0, 1, 0, 0, 0, 1, 1],
[0, 0, 1, 0, 0, 1, 0, 1],
[0, 0, 1, 0, 0, 1, 1, 0],
[0, 0, 1, 0, 0, 1, 1, 1],
[0, 0, 1, 0, 1, 0, 0, 1],
[0, 0, 1, 0, 1, 0, 1, 0],
[0, 0, 1, 0, 1, 0, 1, 1],
[0, 0, 1, 0, 1, 1, 0, 0],
[0, 0, 1, 0, 1, 1, 0, 1],
[0, 0, 1, 0, 1, 1, 1, 0],
[0, 0, 1, 0, 1, 1, 1, 1],
[0, 0, 1, 1, 0, 0, 1, 1],
[0, 0, 1, 1, 0, 1, 0, 1],
[0, 0, 1, 1, 0, 1, 1, 0],
[0, 0, 1, 1, 0, 1, 1, 1],
[0, 0, 1, 1, 1, 0, 0, 1],
[0, 0, 1, 1, 1, 0, 1, 0],
[0, 0, 1, 1, 1, 0, 1, 1],
[0, 0, 1, 1, 1, 1, 0, 0],
[0, 0, 1, 1, 1, 1, 0, 1],
[0, 0, 1, 1, 1, 1, 1, 0],
[0, 0, 1, 1, 1, 1, 1, 1],
[0, 1, 0, 0, 0, 1, 1, 1],
[0, 1, 0, 0, 1, 0, 1, 1],
[0, 1, 0, 0, 1, 1, 0, 1],
[0, 1, 0, 0, 1, 1, 1, 0],
[0, 1, 0, 0, 1, 1, 1, 1],
[0, 1, 0, 1, 1, 1, 1, 1],
[0, 1, 1, 0, 1, 1, 1, 1],
[0, 1, 1, 1, 1, 1, 1, 1],
[1, 0, 0, 0, 0, 0, 1, 1],
[1, 0, 0, 0, 0, 1, 0, 1],
[1, 0, 0, 0, 0, 1, 1, 0],
[1, 0, 0, 0, 0, 1, 1, 1],
[1, 0, 0, 0, 1, 0, 0, 1],
[1, 0, 0, 0, 1, 0, 1, 0],
[1, 0, 0, 0, 1, 0, 1, 1],
[1, 0, 0, 0, 1, 1, 0, 0],
[1, 0, 0, 0, 1, 1, 0, 1],
[1, 0, 0, 0, 1, 1, 1, 0],
[1, 0, 0, 0, 1, 1, 1, 1],
[1, 0, 0, 1, 0, 0, 1, 1],
[1, 0, 0, 1, 0, 1, 0, 1],
[1, 0, 0, 1, 0, 1, 1, 0],
[1, 0, 0, 1, 0, 1, 1, 1],
[1, 0, 0, 1, 1, 0, 0, 1],
[1, 0, 0, 1, 1, 0, 1, 0],
[1, 0, 0, 1, 1, 0, 1, 1],
[1, 0, 0, 1, 1, 1, 0, 0],
[1, 0, 0, 1, 1, 1, 0, 1],
[1, 0, 0, 1, 1, 1, 1, 0],
[1, 0, 0, 1, 1, 1, 1, 1],
[1, 0, 1, 0, 0, 0, 1, 1],
[1, 0, 1, 0, 0, 1, 0, 1],
[1, 0, 1, 0, 0, 1, 1, 0],
[1, 0, 1, 0, 0, 1, 1, 1],
[1, 0, 1, 0, 1, 0, 0, 1],
[1, 0, 1, 0, 1, 0, 1, 0],
[1, 0, 1, 0, 1, 0, 1, 1],
[1, 0, 1, 0, 1, 1, 0, 0],
[1, 0, 1, 0, 1, 1, 0, 1],
[1, 0, 1, 0, 1, 1, 1, 0],
[1, 0, 1, 0, 1, 1, 1, 1],
[1, 0, 1, 1, 0, 1, 1, 1],
[1, 0, 1, 1, 1, 0, 1, 1],
[1, 0, 1, 1, 1, 1, 0, 1],
[1, 0, 1, 1, 1, 1, 1, 0],
[1, 0, 1, 1, 1, 1, 1, 1],
[1, 1, 0, 0, 1, 1, 1, 1],
[1, 1, 0, 1, 1, 1, 1, 1],
[1, 1, 1, 0, 1, 1, 1, 1],
[0, 1, 0, 0, 0, 0, 1, 1],
[0, 1, 0, 0, 0, 1, 0, 1],
[0, 1, 0, 0, 0, 1, 1, 0],
[0, 1, 0, 0, 1, 0, 0, 1],
[0, 1, 0, 0, 1, 0, 1, 0],
[0, 1, 0, 0, 1, 1, 0, 0],
[0, 1, 0, 1, 0, 0, 1, 1],
[0, 1, 0, 1, 0, 1, 0, 1],
[0, 1, 0, 1, 0, 1, 1, 0],
[0, 1, 0, 1, 0, 1, 1, 1],
[0, 1, 0, 1, 1, 0, 0, 1],
[0, 1, 0, 1, 1, 0, 1, 0],
[0, 1, 0, 1, 1, 0, 1, 1],
[0, 1, 0, 1, 1, 1, 0, 0],
[0, 1, 0, 1, 1, 1, 0, 1],
[0, 1, 0, 1, 1, 1, 1, 0],
[1, 1, 0, 0, 0, 0, 1, 1],
[1, 1, 0, 0, 0, 1, 0, 1],
[1, 1, 0, 0, 0, 1, 1, 0],
[1, 1, 0, 0, 0, 1, 1, 1],
[1, 1, 0, 0, 1, 0, 0, 1],
[1, 1, 0, 0, 1, 0, 1, 0],
[1, 1, 0, 0, 1, 0, 1, 1],
[1, 1, 0, 0, 1, 1, 0, 0],
[1, 1, 0, 0, 1, 1, 0, 1],
[1, 1, 0, 0, 1, 1, 1, 0],
[1, 1, 0, 1, 0, 0, 1, 1],
[1, 1, 0, 1, 0, 1, 0, 1],
[1, 1, 0, 1, 0, 1, 1, 0],
[1, 1, 0, 1, 0, 1, 1, 1],
[1, 1, 0, 1, 1, 0, 0, 1],
[1, 1, 0, 1, 1, 0, 1, 0],
[1, 1, 0, 1, 1, 0, 1, 1],
[1, 1, 0, 1, 1, 1, 0, 0],
[1, 1, 0, 1, 1, 1, 0, 1],
[1, 1, 0, 1, 1, 1, 1, 0],
[0, 0, 0, 1, 0, 0, 0, 0],
[0, 0, 1, 0, 0, 0, 0, 0],
[0, 0, 1, 1, 0, 0, 0, 0],
[0, 1, 0, 1, 0, 0, 0, 0],
[0, 1, 1, 0, 0, 0, 0, 0],
[0, 1, 1, 1, 0, 0, 0, 0],
[1, 0, 0, 0, 0, 0, 0, 0],
[1, 0, 0, 1, 0, 0, 0, 0],
[1, 0, 0, 1, 0, 1, 0, 0],
[1, 0, 1, 0, 0, 0, 0, 0],
[1, 0, 1, 0, 0, 1, 0, 0],
[1, 0, 1, 1, 0, 0, 0, 0],
[1, 0, 1, 1, 0, 0, 0, 1],
[1, 0, 1, 1, 0, 0, 1, 0],
[1, 0, 1, 1, 0, 1, 0, 0],
[1, 1, 0, 0, 0, 0, 0, 0],
[1, 1, 0, 1, 0, 0, 0, 0],
[1, 1, 0, 1, 0, 1, 0, 0],
[1, 1, 1, 0, 0, 0, 0, 0],
[1, 1, 1, 0, 0, 1, 0, 0],
[1, 1, 1, 1, 0, 0, 0, 0],
[1, 1, 1, 1, 0, 0, 0, 1],
[1, 1, 1, 1, 0, 0, 1, 0],
[1, 1, 1, 1, 0, 1, 0, 0],
[0, 1, 1, 0, 0, 0, 1, 1],
[0, 1, 1, 0, 0, 1, 0, 1],
[0, 1, 1, 0, 0, 1, 1, 0],
[0, 1, 1, 0, 0, 1, 1, 1],
[0, 1, 1, 0, 1, 0, 0, 1],
[0, 1, 1, 0, 1, 0, 1, 0],
[0, 1, 1, 0, 1, 0, 1, 1],
[0, 1, 1, 0, 1, 1, 0, 0],
[0, 1, 1, 0, 1, 1, 0, 1],
[0, 1, 1, 0, 1, 1, 1, 0],
[0, 1, 1, 1, 0, 0, 1, 1],
[0, 1, 1, 1, 0, 1, 0, 1],
[0, 1, 1, 1, 0, 1, 1, 0],
[0, 1, 1, 1, 0, 1, 1, 1],
[0, 1, 1, 1, 1, 0, 0, 1],
[0, 1, 1, 1, 1, 0, 1, 0],
[0, 1, 1, 1, 1, 0, 1, 1],
[0, 1, 1, 1, 1, 1, 0, 0],
[0, 1, 1, 1, 1, 1, 0, 1],
[0, 1, 1, 1, 1, 1, 1, 0],
[1, 1, 1, 0, 0, 1, 0, 1],
[1, 1, 1, 0, 0, 1, 1, 0],
[1, 1, 1, 0, 1, 1, 0, 0],
[1, 1, 1, 1, 0, 0, 1, 1],
[1, 1, 1, 1, 0, 1, 0, 1],
[1, 1, 1, 1, 0, 1, 1, 0],
[1, 1, 1, 1, 0, 1, 1, 1],
[1, 1, 1, 1, 1, 0, 0, 0],
[1, 1, 1, 1, 1, 0, 0, 1],
[1, 1, 1, 1, 1, 0, 1, 0],
[1, 1, 1, 1, 1, 1, 0, 0],
[1, 1, 1, 1, 1, 1, 0, 1],
[1, 1, 1, 1, 1, 1, 1, 0],
[1, 1, 1, 0, 0, 0, 1, 1],
[1, 1, 1, 0, 0, 1, 1, 1],
[1, 1, 1, 0, 1, 0, 0, 1],
[1, 1, 1, 0, 1, 0, 1, 0],
[1, 1, 1, 0, 1, 0, 1, 1],
[1, 1, 1, 0, 1, 1, 0, 1],
[1, 1, 1, 0, 1, 1, 1, 0],
[0, 1, 1, 1, 0, 0, 0, 1],
[1, 0, 1, 1, 0, 1, 0, 1],
[1, 0, 1, 1, 1, 0, 0, 1],
[1, 1, 1, 1, 1, 0, 1, 1],
[0, 1, 0, 0, 0, 0, 0, 0],
[1, 0, 1, 1, 1, 1, 0, 0],
[1, 0, 1, 1, 1, 0, 1, 0]]

def test_reduced_ine(filename):
    f = open(filename, "r")
    for dd, line in enumerate(f):
        re = 0
        t = line.replace("\n", "").split(" ")
        print(t)
        flag = True
        for row in eq:
            for i, v in enumerate(t):
                re += int(v)*int(row[i])
            # flag = False
            # if (re >= row[-1]):
            #     flag = True
            re += row[-1]
            print("-------{0} >= 0 is {1}".format(re, re >= 0))

def TestPresent():
    # f = open(filename, "r")
    for t in Points1:
        print(t)
        flag = True
        for row in eq_present:
            re = 0
            for i, v in enumerate(t):
                re += int(v)*int(row[i])
            re += row[-1]
            if(re < 0) :
                flag = False
        if(flag == False):
            print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")

            # print("-------{0} >= 0 is {1}".format(re, re >= 0))
        #
        # for row in eq_present:
        #     for i in range(4):
        #         re += int(t[3-i]) * int(row[i])
        #         re += int(t[6-i]) * int(row[i+3])
        #     re += row[-1]
        #     print("-------{0} >= 0 is {1}".format(re, re >= 0))


def print_hi(name):
    # Use a breakpoint in the code line below to debug your script.
    print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    print_hi('PyCharm')
    filename1 = "IIoTBC_WrongDivisionTrails.txt"
    filename2 = "IIoTBC_DivisionTrails.txt"
    # test_reduced_ine(filename1)
    TestPresent()
# See PyCharm help at https://www.jetbrains.com/help/pycharm/
